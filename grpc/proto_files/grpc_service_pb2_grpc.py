# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto_files.grpc_service_pb2 as grpc__service__pb2


class serviceTestStub(object):
    """Remote procedures list
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.emptyReturn = channel.unary_unary(
                '/serviceTest/emptyReturn',
                request_serializer=grpc__service__pb2.Empty.SerializeToString,
                response_deserializer=grpc__service__pb2.Empty.FromString,
                )
        self.doubleReturn = channel.unary_unary(
                '/serviceTest/doubleReturn',
                request_serializer=grpc__service__pb2.doubleData.SerializeToString,
                response_deserializer=grpc__service__pb2.doubleData.FromString,
                )
        self.int32MultiToOneReturn = channel.unary_unary(
                '/serviceTest/int32MultiToOneReturn',
                request_serializer=grpc__service__pb2.int32MultiSend.SerializeToString,
                response_deserializer=grpc__service__pb2.int32Data.FromString,
                )
        self.stringReturn = channel.unary_unary(
                '/serviceTest/stringReturn',
                request_serializer=grpc__service__pb2.stringData.SerializeToString,
                response_deserializer=grpc__service__pb2.stringData.FromString,
                )
        self.int32Return = channel.unary_unary(
                '/serviceTest/int32Return',
                request_serializer=grpc__service__pb2.int32Data.SerializeToString,
                response_deserializer=grpc__service__pb2.int32Data.FromString,
                )
        self.shutdown = channel.unary_unary(
                '/serviceTest/shutdown',
                request_serializer=grpc__service__pb2.Empty.SerializeToString,
                response_deserializer=grpc__service__pb2.Empty.FromString,
                )


class serviceTestServicer(object):
    """Remote procedures list
    """

    def emptyReturn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def doubleReturn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def int32MultiToOneReturn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stringReturn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def int32Return(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def shutdown(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_serviceTestServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'emptyReturn': grpc.unary_unary_rpc_method_handler(
                    servicer.emptyReturn,
                    request_deserializer=grpc__service__pb2.Empty.FromString,
                    response_serializer=grpc__service__pb2.Empty.SerializeToString,
            ),
            'doubleReturn': grpc.unary_unary_rpc_method_handler(
                    servicer.doubleReturn,
                    request_deserializer=grpc__service__pb2.doubleData.FromString,
                    response_serializer=grpc__service__pb2.doubleData.SerializeToString,
            ),
            'int32MultiToOneReturn': grpc.unary_unary_rpc_method_handler(
                    servicer.int32MultiToOneReturn,
                    request_deserializer=grpc__service__pb2.int32MultiSend.FromString,
                    response_serializer=grpc__service__pb2.int32Data.SerializeToString,
            ),
            'stringReturn': grpc.unary_unary_rpc_method_handler(
                    servicer.stringReturn,
                    request_deserializer=grpc__service__pb2.stringData.FromString,
                    response_serializer=grpc__service__pb2.stringData.SerializeToString,
            ),
            'int32Return': grpc.unary_unary_rpc_method_handler(
                    servicer.int32Return,
                    request_deserializer=grpc__service__pb2.int32Data.FromString,
                    response_serializer=grpc__service__pb2.int32Data.SerializeToString,
            ),
            'shutdown': grpc.unary_unary_rpc_method_handler(
                    servicer.shutdown,
                    request_deserializer=grpc__service__pb2.Empty.FromString,
                    response_serializer=grpc__service__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'serviceTest', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class serviceTest(object):
    """Remote procedures list
    """

    @staticmethod
    def emptyReturn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serviceTest/emptyReturn',
            grpc__service__pb2.Empty.SerializeToString,
            grpc__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def doubleReturn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serviceTest/doubleReturn',
            grpc__service__pb2.doubleData.SerializeToString,
            grpc__service__pb2.doubleData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def int32MultiToOneReturn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serviceTest/int32MultiToOneReturn',
            grpc__service__pb2.int32MultiSend.SerializeToString,
            grpc__service__pb2.int32Data.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stringReturn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serviceTest/stringReturn',
            grpc__service__pb2.stringData.SerializeToString,
            grpc__service__pb2.stringData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def int32Return(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serviceTest/int32Return',
            grpc__service__pb2.int32Data.SerializeToString,
            grpc__service__pb2.int32Data.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def shutdown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/serviceTest/shutdown',
            grpc__service__pb2.Empty.SerializeToString,
            grpc__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
